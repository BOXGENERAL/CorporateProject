import java.io.*
import java.util.Scanner;

class Corporate
{
	protected int numDepartment, numBudgetFile, numExpenditureFile, todayYear, todayMonth;
	protected double totalExp, totalBud;
	protected String name, line, fileName = "corporate.txt";
	protected Department[] departmentList = new Department[50];
	protected Project[] projectList = new Project();
	protected Revenue[] revenueList = new Revenue();
	Scanner sc = new Scanner(System.in);
	
	public Corporate()
	{
		numDepartment = 0;
		numBudgetFile = 0;
		numExpenditure = 0;
		todayYear = 0;
		todayMonth = 0;
		totalExp = 0;
		totalBud = 0;
      projectList = new Project[50];
      revenueList = new Revenue[50];	 		
	} // Constructor I
	
	public void setTodayMonth(int todayMonth)
	{
		this.todayMonth = other.todayMonth;		
	} // setTodayMonth mutator
	
	public int getTodayMonth()
	{
		return todayMonth;
	} // getTodayMonth accessor
	
	public void setTodayYear(int todayYear)
	{
		this.todayYear = other.todayYear;
	} // setTodayYear mutator
	
	public int getTodayYear()
	{
		return todayYear;
	} // getTodayYear accessor
	
	public void setTotalExp(double totalExp)
	{
		this.totalExp = other.totalExp;
	} // setTotalExp mutator
	
	public double getTotalExp()
	{
		return totalExp;
	} // getTotalExp accessor
	
	public void setTotalBud(double totalBud)
	{
		this.totalBud = other.totalBud;
	} // setTotalBud mutator
	
	public double getTotalBud()
	{
		return totalBud;
	} // getTotalBud accessor
	
	public void newDepartment()
	{		
		System.out.println("What is the name of the new department?");
		name = sc.nextLine();
		
		try
		{
			for (int i = 0; i < 50; i++)
			{
				if (departmentList[i] == null)
				{
					departmentList[i] = new Department(name, todayYear, todayMonth);
				
					numDepartment++;
					i = 50;
				}
			}
		} catch (ArrayIndexOutOfBoundsException ex)
		{
			System.out.println("DepartmentList already full!");
		}			
	} // newDepartment method
	
	public void showExpenditure()
	{
		Expenditure.toString();
	} // showExpenditure method
	
	public void showRevenue()
	{
		Revenue.toString();
	} // showRevenue method
	
	public void showBudget()
	{
		Budget.toString();
	} // showBudget method
	
	public void addRevenue(int year, int month, double amount)
	{
		Revenue(year, month, amount);
	} // addRevenue method
	
	public void budgetReport()
	{
		double j, temp;
		String temp2;
		double[] budgetRank = new double[50];
		String[] departmentRank = new String[50];
		
		budgetRank[0] = (Department[0].Budget).getTotal();
		departmentRank[0] = Department[0].name;
		
		for (int i = 1; i < 50 && (Department[i].Budget).getTotal() != null; i++)
		{
			budgetRank[i] = (Department[i].Budget).getTotal();
			departmentRank[i] = Department[i].name;
		}
		
		for (int i = 0; i < 50 && budgetRank[i] != null; i++)
		{
			j = i;
			temp = budgetRank[i];
			temp2 = departmentRank[i];
			
			while (j > 0 && temp < budgetRank[j-1])
			{
				budgetRank[j] = budgetRank[j-1];
				departmentRank[j] = departmentRank[j-1];
				j = j - 1;
			}
			
			budgetRank[j] = temp;
			departmentRank[j] = temp2;
		}
		
		try
		{
			BufferedWriter in = new BufferedWriter(new FileWriter("budgetReport.txt", true));
			
			while (line != null)
			{
				out.write("Budget for Every Department Ranked from Highest to Lowest");
				out.newLine();
				
				for (int i = 0; i < 50 && budgetRank[i] != null; i++)
				{
					out.write("" + departmentRank[i] + ": " + budgetRank[i]);
					out.newLine();
				}	
			}
			
			out.close();
		} catch (IOException iox)
		{
			System.out.println("Problem accessing file \"budgetReport.txt\"");
		}
	} // budgetReport method
	
	public void expenditureReport()
	{
		double j, temp;
		String temp2;
		double[] expenditureRank = new double[50];
		String[] departmentRank = new String[50];
		
		expenditureRank[0] = (Department[0].Expenditure).getTotal();
		departmentRank[0] = Department[0].name;
		
		for (int i = 1; i < 50 && (Department[i].Expenditure).getTotal() != null; i++)
		{
			expenditureRank[i] = (Department[i].Expenditure).getTotal();
			departmentRank[i] = Department[i].name;
		}
		
		for (int i = 0; i < 50 && expenditureRank[i] != null; i++)
		{
			j = i;
			temp = expenditureRank[i];
			temp2 = departmentRank[i];
			
			while (j > 0 && temp < expenditureRank[j-1])
			{
				expenditureRank[j] = expenditureRank[j-1];
				departmentRank[j] = departmentRank[j-1];
				j = j - 1;
			}
			
			expenditureRank[j] = temp;
			departmentRank[j] = temp2;
		}
		
		try
		{
			BufferedWriter in = new BufferedWriter(new FileWriter("expenditureReport.txt", true));
			
			while (line != null)
			{
				out.write("Expenditure for Every Department Ranked from Highest to Lowest");
				out.newLine();
				
				for (int i = 0; i < 50 && expenditureRank[i] != null; i++)
				{
					out.write("" + departmentRank[i] + ": " + expenditureRank[i]);
					out.newLine();
				}	
			}
			
			out.close();
		} catch (IOException iox)
		{
			System.out.println("Problem accessing file \"expenditureReport.txt\"");
		}
	} // expenditureReport method
	
	public void calTotalExp()
	{		
		for (int i = 0; i < 50 && Department[i] != null; i++)
		{
			totalExp = totalExp + (Department[i].Expenditure).getTotal();
		}
	} // calTotalExp method
	
	public void calTotalBud()
	{		
		for (int i = 0; i < 50 && Department[i] != null; i++)
		{
			totalBud = totalBud + (Department[i].Budget).getTotal();
		}
	} // calTotalBud method
	
	public double searchCategory(String category, boolean search)
   {
      for (int i = 0; i < 50 && categoriesList[i] != null; i++)
      {
         if (categoriesList[i].name == category)
         {
            search = true;
            return categoriesList[i].getAmount();
         }
      }
   } // searchCategory method
	
   public Department searchDepartment(String department)
   {
      for (int i = 0; i < 50 && departmentList[i] != null; i++)
      {
         if (departmentList[i].name == department)
         {
            return departmentList[i];
         }
      }
   } // searchDepartment method
   
	public boolean changeCategory(String department, boolean option, String category, double num)
   {
   	if (option == true)
		{
			((Department[department].Expenditue).Category[category]).amount = num;
		}
		else if (option == false)
		{
			((Department[department].Budget).Category[category]).amount = num;
		}
   } // changeCategory method 
	
	public void createBudgetFile()
	{
		try 
		{
			BufferedWriter in = new BufferedWriter(new FileWriter("budgetFile.txt", true);
			
			out.write("Budget File");
			out.newLine();
			
			for (int i = 0; i < numDepartment; i++)
			{
				for (int j = 0; i < 50; j++)
				{
					out.write(((Department[i].Budget).Category[j]).toString());
					out.newLine();
				}
			}
			
			out.close();
		} catch (IOException iox)
		{
			System.out.println("Problem accessing file \"budgetFile.txt\"");
		}
	} // createBudgetFile method
	
	public void createExpenditureFile()
	{
		try 
		{
			BufferedWriter in = new BufferedWriter(new FileWriter("expenditureFile.txt", true);
			
			out.write("Expenditure File");
			out.newLine();
			
			for (int i = 0; i < numDepartment; i++)
			{
				for (int j = 0; i < 50; j++)
				{
					out.write(((Department[i].Expenditure).Category[j]).toString());
					out.newLine();
				}
			}
			
			out.close();
		} catch (IOException iox)
		{
			System.out.println("Problem accessing file \"expenditureFile.txt\"");
		}
	} // createExpenditureFile method
	
	public void compareBudExp()
	{
		double[] budget = new double[3];
		double[]	expenditure = new double[3];
		
		try 
		{
			BufferedReader in = new BufferedReader(new FileReader("budgetReport.txt");
			
			line = in.readLine();
			
			for (int i = 0; i < 3 && line != null; i++)
			{
				budget[i] = Double.parseDouble(line);
				
				line = in.readLine();
			}
			
			in.close();	
		} catch (IOException iox)
		{
			System.out.println("Problem accessing file \"budgetReport.txt\"");
		}
		
		try
		{ 
			BufferedReader in = new BufferedReader(new FileReader("expenditureReport.txt");
			
			line = in.readLine();
			
			for (int i = 0; i < 3 && line != null; i++)
			{
				expenditure[i] = Double.parseDouble(line);
				
				line = in.readLine();
			}
			
			in.close();
		} catch (IOException iox)
		{
			System.out.println("Problem accessing file \"expenditureReport.txt\"");
		}
		
	   for (int i = 0; i < 3; i++)
      {
         if (expenditure[i] < budget[i])
         {
            System.out.println("The budget exceeds the expenditure with a difference of " + budget[i]-expenditure[i] + ".");
         }
         else if (expenditure[i] > budget[i])
         {
            System.out.println("The expenditure exceeds the budget with a difference of " + expenditure[i]-budget[i] + ".");
         }
         else 
         {
            System.out.println("The expenditure and the budget have the same value.");
         }
      }
		
	} // compareBudExp method
	
   public void compareDepartment()
   {
   
   } // compareDepartment method
   
   public void compareCategory()
   {
      double highestCategory = 0;
      
      for (int i = 0; i < 50 && categoriesList[i] != null; i++)
      {
         if (categoriesList[i].amount > highestCategory)
         {
            highestCategory = categoriesList[i].amount;
         }
      }
      
   } // compareCategory method
   
} // Corporate class

