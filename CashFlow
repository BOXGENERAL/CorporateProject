public class CashFlow 
   {
      private double profit, predictingProfit, cash, totalDebt;
      private Debt debtList[] = new Debt [50];
      private int numDebt;
      
       public CashFlow(double money)
       {
         cash = money;
         profit = 0;
         totalDebt = 0;
			 numDebt = 0;
         predictingProfit = 0;
       }
       
       public void setDebt(double amo, double inte, int year, int month) {
       		try{
			debtList[numDebt] = new Debt(amo, inte, year, month);
			numDebt++;
			Department Debt = Corporate.searchDepartment("Debt");
			Debt.addCategory("debt1", 0, debtList[numDebt].getDebtMonthlyPayment());
		} catch(ArrayIndexOutOfBoundsException ex)
		{
			System.out.println ("Debt too full");
		}
       }
       
       public void setProfit ()
      {
         profit = CashFlow.calculateProfit();
      }
   
       public double getProfit ()
      {
         return profit;
      }
      
      public double getCash() {
      	return cash;
      }
      
      public void changeCash() {
      	cash = cash + profit;
      }
      
      public boolean checkCash() {
      	if (cash + predicting * 3 <= 0)
		return false;
        else 
		return true;
      }
      
      public void setPredictingProfit()
      {
         predictingProfit = CashFlow.calculatePredictingProfit();
      }
      
      public double getPredictingProfit()
      {
         return predictingProfit;
      }
      
       public double calculateProfit()
      {
         return Revenue.getAmount() - Corperate.getTotalExp();
      }
   
      public double calcultePredictingProfit()
      {
         return Revenue.getAmount() - Corperate.getTotalBud();
      }
       
       public String toString()
      {
         String c = "Cash amount: $" + cash + "\nProfit: $" + profit + "\nPrediting Profit: $" + predictingProfit + "\nDebt: $" + totalDebt;
	 return c;
      }
   }
